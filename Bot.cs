using System;
using System.Collections.Generic;
using System.Timers;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Args;
using System.Linq;

namespace TG_bot
{
    public class Bot
    {
        protected ITelegramBotClient botClient;
        // List<BotCommand> botCommands = new List<BotCommand>() {
        //     new BotCommand() {Command = "start", Description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
        //     new BotCommand() {Command = "stop", Description = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"},
        //     new BotCommand() {Command = "settings", Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
        // };
        // List<BotCommand> botSettingsCommand = new List<BotCommand>() {
        //     new BotCommand() {Command = "setinterval", Description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"},
        //     new BotCommand() {Command = "notifyonweekends", Description = "–£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"},
        //     new BotCommand() {Command = "setstarttime", Description = "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"},
        //     new BotCommand() {Command = "setstoptime", Description = "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"},
        // };
        static readonly Dictionary<BotCommand, Func<Message, List<Message>>> commands = new Dictionary<BotCommand, Func<Message, List<Message>>>()
        {
            {
                new BotCommand(){Command = "start", Description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
                startCommand
            },
            {
                new BotCommand() {Command = "stop", Description = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"},
                stopCommand
            },
            {
                new BotCommand() {Command = "settings", Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                settingsCommand
            },
            {
                new BotCommand() {Command = "timeleft", Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                timeleftCommand
            }
        };

        static List<Message> startCommand(Message msg)
        {
            var replays = new List<Message>();

            if (Bot.GetBot().chats.Where(chat => chat.chatId == msg.Chat.Id).Count() == 0)
            {
                Bot.GetBot().chats.Add(new Chat(msg.Chat.Id));
                var thisChat = Bot.GetBot().chats.Where(chat => chat.chatId == msg.Chat.Id).First();

                replays.Add(new Message() { Text = "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∑–≤–∞—Ç—å –ø–æ–∫—É—Ä–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å\n–ü–æ–≥–Ω–∞–ª–∏, –π–æ–ø—Ç–∞ üòú" });

                thisChat.timer.Elapsed += (Object source, ElapsedEventArgs e) =>
                {
                    Console.WriteLine($"Send messege to {thisChat.chatId}");
                    Bot.GetBot().botClient.SendTextMessageAsync(
                        chatId: thisChat.chatId,
                        text: replayVariants[thisChat.random.Next(replayVariants.Count)]
                    );
                };
                thisChat.timer.Start();
            }
            else
            {
                replays.Add(new Message()
                {
                    Sticker = new Sticker()
                    {
                        FileId = "CAACAgIAAxkBAAPnYKeoBjJxguIE9tDH0LsvI_gE4pUAAs4IAAL6C7YI6rxUhlYWVUkfBA"
                    }
                });
            }
            return replays;
        }
        static List<Message> stopCommand(Message msg)
        {
            var replays = new List<Message>();

            if (Bot.GetBot().chats.Where(chat => chat.chatId == msg.Chat.Id).Count() == 0)
            {
                replays.Add(new Message() { Text = "WTF?\n–ú—ã –∂ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏, —á—Ç–æ–± –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å" });
            }
            else
            {
                var thisChat = Bot.GetBot().chats.Where(chat => chat.chatId == msg.Chat.Id).First();
                Bot.GetBot().chats.Remove(thisChat);
                replays.Add(new Message() { Text = "–¢—ã —á–æ, –±—Ä–æ—Å–∏—Ç—å —Ä–µ—à–∏–ª?! üò±" });
                replays.Add(new Message() { Text = "–µ—â—ë —É–≤–∏–¥–∏–º—Å—è, —Å—É—á–∫–∞ üòâ\n–ü–∏—à–∏, –∫–∞–∫ –æ—Å–æ–∑–Ω–∞–µ—à—å" });
            }
            return replays;
        }
        static List<Message> settingsCommand(Message msg)
        {
            var replays = new List<Message>();
            return replays;
        }
        static List<Message> timeleftCommand(Message msg)
        {
            var replays = new List<Message>();
            if (Bot.GetBot().chats.Count != 0)
            {
                var thisChat = Bot.GetBot().chats.Where(chat => chat.chatId == msg.Chat.Id).First();
                var tl = thisChat.timer.TimeLeft;
                var s = tl / 1000;
                var m = s / 60;
                var h = m / 60;
            }
            return replays;
        }

        private string botToken = Environment.GetEnvironmentVariable("botToken");
        static Bot bot = null;
        List<Chat> chats = new List<Chat>();

        static readonly List<string> replayVariants = new List<string>()
        {
            "–ü–∞—Ü–∞–Ω—Ç—Ä—ç, –≥–æ –¥—É–Ω–µ–º",
            "–≠–π, –ø–∏–¥–æ—Ä—ã, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–Ω—ë–º",
            "–†–µ–±—è—Ç–∫–∏, –∫—É—Ä–∏—Ç—å –ø–æ—Ä–∞",
            "–ì–æ –¥—É—Ç—å –π–æ–ø—Ç–∞",
            "–ß–æ, –º–æ–∂ –¥—É–Ω–µ–º?",
            "–ü–æ—Ä–∞ –¥—É—Ç—å",
            "–ê —Ö—É–ª–∏ –Ω–µ –∫—É—Ä–∏–º –≤—Å—ë –µ—â—ë?",
            "–ü–∞—Ä–Ω–∏—à–∫–∏, –π–æ–±–∞–Ω–∞, –ø–æ–±–µ–∂–∞–ª–∏ –∫—É—Ä–∏—Ç—å"
        };
        public static Bot GetBot()
        {
            if (bot == null)
                bot = new Bot();
            return bot;
        }
        Bot()
        {
            botClient = new TelegramBotClient(botToken);
            var me = botClient.GetMeAsync().Result;
            var res = botClient.SetMyCommandsAsync(commands.Keys);
            // Console.WriteLine("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
            Console.WriteLine(
                $"Hello, World! I am user {me.Id} and my name is {me.FirstName}."
            );
            botClient.OnMessage += Bot_OnMessage;

        }
        ~Bot()
        {
            Stop();
        }
        public void Start()
        {
            botClient.StartReceiving();
        }
        public void Stop()
        {
            botClient.StopReceiving();
        }

        static async void Bot_OnMessage(object sender, MessageEventArgs e)
        {
            if (e.Message.Text != null)
            {
                Console.WriteLine($"Received a text message in chat {e.Message.Chat.Id}.");
                var cmd = commands.Where(cmd => cmd.Key.Command == e.Message.Text.Split('@')[0].Trim('/')).FirstOrDefault();
                if (cmd.Key != null)
                {
                    var replays = cmd.Value.Invoke(e.Message);
                    foreach (var replay in replays)
                    {
                        if (replay.Sticker != null)
                        {
                            await Bot.GetBot().botClient.SendStickerAsync(
                                chatId: e.Message.Chat.Id,
                                sticker: replay.Sticker.FileId);
                        }
                        else
                        {
                            await Bot.GetBot().botClient.SendTextMessageAsync(
                                chatId: e.Message.Chat.Id,
                                text: replay.Text);
                        }
                    }
                }
            }
        }


    }
}